""" Mountain Soup Code Snippet to Multithread image URL collection and downloading generated by chatGPT
given prompt by Alder French

ChatGPT Description of Code: 
Sure! Here is an example of how you can modify your code to use a thread-safe shared resource to download images and store them in a folder:

**code**

This code creates a global list urls to store the collected URLs and a global list images to store the downloaded images.
It also creates a Lock object to synchronize access to the lists. The collect_urls function is run concurrently by one thread,
and it acquires the lock before accessing the urls list and releases it after it is done. 
The download_images function is run concurrently by another thread, and it acquires the lock before accessing the urls and 
images lists and releases it after it is done.
 This ensures that the threads do not try to access the lists at the same time, which could cause errors or race conditions.


"""


import threading
import requests
import os

# Global variables to store the URLs and the images
urls = []
images = []

# Create a lock to synchronize access to the URLs and images
lock = threading.Lock()

def collect_urls(driver):
    # Acquire the lock before accessing the shared resource
    lock.acquire()
    try:
        # Collect the URLs and add them to the list
        # (Replace this with your existing code to collect URLs using Selenium)
        element = driver.find_element_by_css_selector('.rg_i')
        urls.append(element.get_attribute('src'))
    finally:
        # Release the lock after accessing the shared resource
        lock.release()

def download_images(folder):
    # Acquire the lock before accessing the shared resource
    lock.acquire()
    try:
        # Download the images and add them to the images list
        for url in urls:
            response = requests.get(url)
            image = response.content
            images.append(image)

        # Save the images to the specified folder
        for i, image in enumerate(images):
            with open(os.path.join(folder, str(i)), 'wb') as f:
                f.write(image)
    finally:
        # Release the lock after accessing the shared resource
        lock.release()

# Create two threads to collect URLs and download images concurrently
thread1 = threading.Thread(target=collect_urls, args=(driver,))
thread2 = threading.Thread(target=download_images, args=(folder,))

# Start the threads
thread1.start()
thread2.start()